kafka:
  topics:
    - name: topic-a
      partitions: 3
      replication-factor: 2
      configs:
        min.insync.replicas: "2"
        retention.ms: "86400000"
    - name: topic-b
      partitions: 1
      replication-factor: 1
      configs:
        cleanup.policy: "compact"
        retention.ms: "604800000"
//////////////////////////////////////
        import java.util.Map;

public class TopicDefinition {
    private String name;
    private int partitions;
    private short replicationFactor;
    private Map<String, String> configs;

    // Getters and setters
}

******************
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@ConfigurationProperties(prefix = "kafka")
public class KafkaTopicsConfig {
    private List<TopicDefinition> topics;

    public List<TopicDefinition> getTopics() {
        return topics;
    }

    public void setTopics(List<TopicDefinition> topics) {
        this.topics = topics;
    }
}
*********************

import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.List;
import java.util.stream.Collectors;

@Configuration
public class KafkaTopicConfig {

    private final KafkaTopicsConfig kafkaTopicsConfig;

    public KafkaTopicConfig(KafkaTopicsConfig kafkaTopicsConfig) {
        this.kafkaTopicsConfig = kafkaTopicsConfig;
    }

    @Bean
    public List<NewTopic> createTopics() {
        return kafkaTopicsConfig.getTopics().stream()
                .map(t -> new NewTopic(t.getName(), t.getPartitions(), t.getReplicationFactor())
                        .configs(t.getConfigs()))
                .collect(Collectors.toList());
    }
}
